"""Functions to manage the Nornir inventory."""

from typing import Optional

import getpass
import logging
import os
import shutil
import yaml


from rich import print  # pylint: disable=W0622
from rich.prompt import Prompt, Confirm
from nornir import InitNornir

import typer

from classes.config import Config

CONFIG = Config()


def set_default_credentials(
    prompt: bool = typer.Option(False, is_flag=True, help="Prompt for credentials."),
):
    """Set the default credentials for the Nornir inventory."""

    username = CONFIG.env.tacacs_username
    password = CONFIG.env.tacacs_password

    if prompt or not username:
        username = Prompt.ask("[yellow]Enter TACACS username")

    if prompt or not password:
        print("[yellow]Enter TACACS password (input hidden): ", end="")
        password = getpass.getpass("")

    if not (username and password):
        message = ""
        if not username:
            message += (
                "TACACS_USER not found in .env file and no username was inputted.\n"
            )
        if not password:
            message += (
                "TACACS_PASS not found in .env file and no password was inputted.\n"
            )
        raise ValueError(message)

    CONFIG.nornir.inventory.defaults.username = username
    CONFIG.nornir.inventory.defaults.password = password


def _file_exists_and_no_overwrite(folderpath: str, name: str) -> bool:
    if not os.path.exists(folderpath):
        return False

    if Confirm.ask(f"Inventory folder {name} already exists. Overwrite?"):
        shutil.rmtree(folderpath)
        return False

    return True


def save_inventory(
    save_name: str = typer.Option(
        default=None,
        show_default="datetime the inventory was generated",
        help="Name of the saved inventory.",
    ),
):
    """Save the current Nornir inventory to a file."""

    if not CONFIG.has_nornir():
        print("[red bold]No inventory to save.")
        return

    if not os.path.isdir(CONFIG.inventory_folder):
        os.mkdir(CONFIG.inventory_folder)

    save_name = str(save_name) if save_name is not None else CONFIG.metadata.name
    folderpath = os.path.join(CONFIG.inventory_folder, save_name)

    if _file_exists_and_no_overwrite(folderpath, save_name):
        print("[red bold]Inventory not saved.")
        return

    CONFIG.metadata.name = save_name

    try:
        os.mkdir(folderpath)

        CONFIG.metadata.save_metadata(os.path.join(folderpath, "metadata.yaml"))

        defaults = CONFIG.nornir.inventory.defaults.dict()
        defaults.pop("username", None)
        defaults.pop("password", None)

        with open(
            os.path.join(folderpath, "defaults.yaml"), "w+", encoding="utf-8"
        ) as file:
            yaml.dump(defaults, file)

        hosts = {k: v.dict() for k, v in CONFIG.nornir.inventory.hosts.items()}
        with open(
            os.path.join(folderpath, "hosts.yaml"), "w+", encoding="utf-8"
        ) as file:
            yaml.dump(hosts, file)

        groups = {k: v.dict() for k, v in CONFIG.nornir.inventory.groups.items()}
        with open(
            os.path.join(folderpath, "groups.yaml"), "w+", encoding="utf-8"
        ) as file:
            yaml.dump(groups, file)

    except Exception as e:
        logging.error("Error saving inventory %s: %s", save_name, e)


def _delete_inventory(filename: str, confirm: bool = True):
    filepath = os.path.join(CONFIG.inventory_folder, filename)

    if not os.path.exists(filepath):
        print(f"[red bold]Inventory file not found: {filename}")
        return

    if not confirm or Confirm.ask(f"Are you sure you want to delete {filename}?"):
        try:
            shutil.rmtree(filepath)
            print(f"Deleted inventory file: {filename}")
        except OSError as e:
            raise OSError(f"Error deleting inventory file: {e}") from e


def _list_inventory_to_delete(contents: list[str]):
    folders = [
        folder
        for folder in contents
        if os.path.isdir(os.path.join(CONFIG.inventory_folder, folder))
    ]
    if not folders:
        print("[red bold]No inventory folders found.")
        return

    for count, folder in enumerate(folders, start=1):
        print(f"[yellow]{count}: {folder}")

    while True:
        user_input = Prompt.ask(
            "[bright_white bold]\nSelect a file to delete by number"
        )
        if user_input.isdigit() and int(user_input) in range(1, len(folders) + 1):
            _delete_inventory(folders[int(user_input) - 1])
            break

        print("[red bold]Invalid input. Please enter a number from the list.")


def delete_inventory(filename: Optional[str] = None, all: bool = False):  # pylint: disable=W0622
    """List and delete inventory files generated by project.
    Passing a --filename will delete that inventory file.
    if --all is passed, all inventory files will be deleted."""

    if filename and all:
        raise ValueError("Cannot pass both --filename and --all.")

    contents = os.listdir(CONFIG.inventory_folder)
    if not contents:
        print("[red bold]No inventory files found.")
        return

    if filename:
        _delete_inventory(filename)
    elif all:
        if Confirm.ask("Are you sure you want to delete all inventory files?"):
            for file in contents:
                _delete_inventory(file, confirm=False)
        return
    else:
        _list_inventory_to_delete(contents)


def _load_inventory(filename: str):
    if not os.path.exists(
        (filepath := os.path.join(CONFIG.inventory_folder, filename))
    ):
        print(f"[red bold]Inventory file not found: {filename}")
        return

    metadata_path = os.path.join(filepath, "metadata.yaml")

    if os.path.exists(metadata_path):
        CONFIG.metadata.set_metadata_from_file(metadata_path)

    else:
        if not Confirm.ask(
            f"""[red bold]The inventory exists at {filepath} \
            but is missing metadata.yaml.
            Would you like to load it anyway?"""
        ):
            return

        CONFIG.metadata.set_metadata_from_input(filter_parameters=None)

    try:
        nornir = InitNornir(
            inventory={
                "plugin": "SimpleInventory",
                "options": {
                    "host_file": os.path.join(filepath, "hosts.yaml"),
                    "group_file": os.path.join(filepath, "groups.yaml"),
                    "defaults_file": os.path.join(filepath, "defaults.yaml"),
                },
            },
            runner={"plugin": "threaded", "options": {"num_workers": 100}},
            logging={"enabled": False},
        )

        CONFIG.nornir = nornir

        print(f"[green bold]Loaded inventory file: [cyan]{filename}")

        set_default_credentials(prompt=False)

    except Exception as e:
        logging.error("Error loading inventory file %s: %s", filename, e)


def load_inventory(filename: Optional[str] = None):
    """Load an inventory file generated by project."""

    if not (contents := os.listdir(CONFIG.inventory_folder)):
        print("[red bold]No inventory files found.")
        return

    if not filename:
        count = 1
        folders = {}
        for folder in contents:
            if os.path.isdir(os.path.join(CONFIG.inventory_folder, folder)):
                print(f"[cyan bold]{count}: {folder}")
                folders[str(count)] = folder
                count += 1

        while True:
            user_input = Prompt.ask(
                "[bright_white bold]\nSelect a file to load by number"
            )
            if user_input in folders:
                _load_inventory(folders[user_input])
                return

            print("[red bold]Invalid input. Please enter a number from the list.")

    _load_inventory(filename)
